{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponents","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","e","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","name","ref","cols","rows","required","type","ActionBtn","tweet","action","setLikes","userLike","justClicked","setjustClicked","actionDisplay","display","onClick","Tweet","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","console","log","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","message","send","loadTweets","map","item","index","key","App","src","logo","alt","Boolean","window","location","hostname","match","appEL","document","getElementById","ReactDOM","render","StrictMode","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0e4bbc0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport { loadTweets } from '../lookup';\n// import { TweetList } from '.';\n\nexport const TweetsComponents = (props) => {\n  const textAreaRef = React.createRef();\n  const [newTweets, setNewTweets] = useState([]);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newVal = textAreaRef.current.value;\n    let tempNewTweets = [...newTweets];\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id: 1211,\n    });\n    setNewTweets(tempNewTweets);\n    textAreaRef.current.value = '';\n  };\n  return (\n    <div className={props.className}>\n      <div className=\"col-12 mb-3\">\n        <form onSubmit={handleSubmit} name=\"tweet\">\n          <textarea\n            ref={textAreaRef}\n            className=\"form-control\"\n            name=\"\"\n            id=\"\"\n            cols=\"50\"\n            rows=\"5\"\n            required\n          ></textarea>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Tweet\n          </button>\n        </form>\n      </div>\n      <TweetList newTweets={newTweets} />\n    </div>\n  );\n};\n\nexport function ActionBtn(props) {\n  const { tweet, action } = props;\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n  const [justClicked, setjustClicked] = useState(\n    tweet.userLike === true ? true : false\n  );\n  const actionDisplay = action.display ? action.display : 'Action';\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (action.type === 'like') {\n      if (justClicked === true) {\n        setLikes(likes - 1);\n        setjustClicked(false);\n      } else {\n        setLikes(likes + 1);\n        setjustClicked(true);\n      }\n    }\n  };\n  const display =\n    action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay;\n  return (\n    <button className=\"btn btn-outline-primary btn-sm\" onClick={handleClick}>\n      {display}\n    </button>\n  );\n}\n\nexport const Tweet = (props) => {\n  const { tweet } = props;\n  const className = props.className\n    ? props.className\n    : 'col-10 mx-auto col-md-6';\n  return (\n    <div className={className}>\n      <p>\n        {tweet.id} - {tweet.content}\n      </p>\n      <div className=\"btn btn-group\">\n        <ActionBtn tweet={tweet} action={{ type: 'like', display: 'Likes' }} />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: 'unlike', display: 'Unlike' }}\n        />\n        <ActionBtn\n          tweet={tweet}\n          action={{ type: 'retweet', display: 'Retweet' }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const TweetList = (props) => {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  // console.log(props.newTweets);\n  // setTweetsInit([...props.newTweets].concat(tweetsInit));\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n    console.log('in first use effect');\n\n    return () => {};\n  }, [tweetsInit, props.newTweets, tweets]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response);\n      }\n    };\n    console.log('in second use effect');\n\n    loadTweets(myCallback);\n  }, []);\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        className=\"my-5 py-5 border bg-white text-dark\"\n        tweet={item}\n        key={index}\n      />\n    );\n  });\n};\n","export function loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET';\n  const url = 'http://localhost:8000/api/tweets';\n  const responseType = 'json';\n\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = (e) => {\n    console.log(e);\n    callback({ message: 'The request was an error' }, 400);\n  };\n  xhr.send();\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TweetsComponents } from '../src/tweets/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <TweetsComponents />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetsComponents } from './tweets';\n\nconst appEL = document.getElementById('root');\nif (appEL) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEL\n  );\n}\nconst tweetsEl = document.getElementById('tweetme-2');\nif (tweetsEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponents />\n    </React.StrictMode>,\n    tweetsEl\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}